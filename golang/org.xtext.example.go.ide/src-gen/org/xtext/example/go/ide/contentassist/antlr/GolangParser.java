/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.go.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.go.ide.contentassist.antlr.internal.InternalGolangParser;
import org.xtext.example.go.services.GolangGrammarAccess;

public class GolangParser extends AbstractContentAssistParser {

	@Inject
	private GolangGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGolangParser createParser() {
		InternalGolangParser result = new InternalGolangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getVarDeclAccess().getAlternatives(), "rule__VarDecl__Alternatives");
					put(grammarAccess.getSpecAccess().getAlternatives(), "rule__Spec__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getSignAccess().getAlternatives(), "rule__Sign__Alternatives");
					put(grammarAccess.getVarDeclAccess().getGroup_0(), "rule__VarDecl__Group_0__0");
					put(grammarAccess.getVarDeclAccess().getGroup_1(), "rule__VarDecl__Group_1__0");
					put(grammarAccess.getSpecAccess().getGroup_1(), "rule__Spec__Group_1__0");
					put(grammarAccess.getSpecAccess().getGroup_2(), "rule__Spec__Group_2__0");
					put(grammarAccess.getSpecAccess().getGroup_3(), "rule__Spec__Group_3__0");
					put(grammarAccess.getSpecAccess().getGroup_4(), "rule__Spec__Group_4__0");
					put(grammarAccess.getSpecAccess().getGroup_5(), "rule__Spec__Group_5__0");
					put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_2(), "rule__Expression__Group_2__0");
					put(grammarAccess.getExpressionAccess().getGroup_3(), "rule__Expression__Group_3__0");
					put(grammarAccess.getExpressionAccess().getGroup_4(), "rule__Expression__Group_4__0");
					put(grammarAccess.getVarDeclAccess().getSpecsAssignment_0_1(), "rule__VarDecl__SpecsAssignment_0_1");
					put(grammarAccess.getVarDeclAccess().getSpecsAssignment_1_2(), "rule__VarDecl__SpecsAssignment_1_2");
					put(grammarAccess.getSpecAccess().getNameAssignment_0(), "rule__Spec__NameAssignment_0");
					put(grammarAccess.getSpecAccess().getExpressionsAssignment_1_4(), "rule__Spec__ExpressionsAssignment_1_4");
					put(grammarAccess.getSpecAccess().getExpressionsAssignment_2_3(), "rule__Spec__ExpressionsAssignment_2_3");
					put(grammarAccess.getSpecAccess().getExpressionsAssignment_3_3(), "rule__Spec__ExpressionsAssignment_3_3");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GolangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GolangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
