/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.go.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GolangGrammarAccess extends AbstractGrammarElementFinder {
	
	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Golang.VarDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cVarKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSpecsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSpecsSpecParserRuleCall_0_1_0 = (RuleCall)cSpecsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVarKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cSpecsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSpecsSpecParserRuleCall_1_2_0 = (RuleCall)cSpecsAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//VarDecl:
		//	'var' specs+=Spec+ |
		//	'var' '(' specs+=Spec+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'var' specs+=Spec+ | 'var' '(' specs+=Spec+ ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'var' specs+=Spec+
		public Group getGroup_0() { return cGroup_0; }
		
		//'var'
		public Keyword getVarKeyword_0_0() { return cVarKeyword_0_0; }
		
		//specs+=Spec+
		public Assignment getSpecsAssignment_0_1() { return cSpecsAssignment_0_1; }
		
		//Spec
		public RuleCall getSpecsSpecParserRuleCall_0_1_0() { return cSpecsSpecParserRuleCall_0_1_0; }
		
		//'var' '(' specs+=Spec+ ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'var'
		public Keyword getVarKeyword_1_0() { return cVarKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//specs+=Spec+
		public Assignment getSpecsAssignment_1_2() { return cSpecsAssignment_1_2; }
		
		//Spec
		public RuleCall getSpecsSpecParserRuleCall_1_2_0() { return cSpecsSpecParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class SpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Golang.Spec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cExpressionsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_4_0 = (RuleCall)cExpressionsAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_3_0 = (RuleCall)cExpressionsAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpressionsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpressionsExpressionParserRuleCall_3_3_0 = (RuleCall)cExpressionsAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		
		//Spec:
		//	name=ID |
		//	',' ID ID '=' expressions+=Expression |
		//	',' ID '=' expressions+=Expression | ID ID '=' expressions+=Expression | ID '=' INT |
		//	',' ID ',' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID | ',' ID ID '=' expressions+=Expression | ',' ID '=' expressions+=Expression | ID ID '=' expressions+=Expression
		//| ID '=' INT | ',' ID ',' ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//',' ID ID '=' expressions+=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_2() { return cIDTerminalRuleCall_1_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_3() { return cEqualsSignKeyword_1_3; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_4() { return cExpressionsAssignment_1_4; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_4_0() { return cExpressionsExpressionParserRuleCall_1_4_0; }
		
		//',' ID '=' expressions+=Expression
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_2_3() { return cExpressionsAssignment_2_3; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_3_0() { return cExpressionsExpressionParserRuleCall_2_3_0; }
		
		//ID ID '=' expressions+=Expression
		public Group getGroup_3() { return cGroup_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_0() { return cIDTerminalRuleCall_3_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_2() { return cEqualsSignKeyword_3_2; }
		
		//expressions+=Expression
		public Assignment getExpressionsAssignment_3_3() { return cExpressionsAssignment_3_3; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_3_3_0() { return cExpressionsExpressionParserRuleCall_3_3_0; }
		
		//ID '=' INT
		public Group getGroup_4() { return cGroup_4; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4_0() { return cIDTerminalRuleCall_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
		
		//',' ID ',' ID
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_5_1() { return cIDTerminalRuleCall_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_2() { return cCommaKeyword_5_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_5_3() { return cIDTerminalRuleCall_5_3; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Golang.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cSignParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cSignParserRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cSignParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final RuleCall cSignParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_3_4 = (RuleCall)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cSignParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Expression:
		//	ID '(' Sign INT ')' | ID '.' ID '(' Sign INT ')' | ID '[' ID ']' | Sign INT ',' Sign INT | Sign INT | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '(' Sign INT ')' | ID '.' ID '(' Sign INT ')' | ID '[' ID ']' | Sign INT ',' Sign INT | Sign INT | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID '(' Sign INT ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//Sign
		public RuleCall getSignParserRuleCall_0_2() { return cSignParserRuleCall_0_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_3() { return cINTTerminalRuleCall_0_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//ID '.' ID '(' Sign INT ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_2() { return cIDTerminalRuleCall_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }
		
		//Sign
		public RuleCall getSignParserRuleCall_1_4() { return cSignParserRuleCall_1_4; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_5() { return cINTTerminalRuleCall_1_5; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
		
		//ID '[' ID ']'
		public Group getGroup_2() { return cGroup_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_0() { return cIDTerminalRuleCall_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_2() { return cIDTerminalRuleCall_2_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
		
		//Sign INT ',' Sign INT
		public Group getGroup_3() { return cGroup_3; }
		
		//Sign
		public RuleCall getSignParserRuleCall_3_0() { return cSignParserRuleCall_3_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_1() { return cINTTerminalRuleCall_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }
		
		//Sign
		public RuleCall getSignParserRuleCall_3_3() { return cSignParserRuleCall_3_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_4() { return cINTTerminalRuleCall_3_4; }
		
		//Sign INT
		public Group getGroup_4() { return cGroup_4; }
		
		//Sign
		public RuleCall getSignParserRuleCall_4_0() { return cSignParserRuleCall_4_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_1() { return cINTTerminalRuleCall_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_5() { return cINTTerminalRuleCall_5; }
	}
	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Golang.Sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Sign:
		//	'-' | '+';
		@Override public ParserRule getRule() { return rule; }
		
		//'-' | '+'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
	}
	
	
	private final VarDeclElements pVarDecl;
	private final SpecElements pSpec;
	private final ExpressionElements pExpression;
	private final SignElements pSign;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GolangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVarDecl = new VarDeclElements();
		this.pSpec = new SpecElements();
		this.pExpression = new ExpressionElements();
		this.pSign = new SignElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.go.Golang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//VarDecl:
	//	'var' specs+=Spec+ |
	//	'var' '(' specs+=Spec+ ')';
	public VarDeclElements getVarDeclAccess() {
		return pVarDecl;
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}
	
	//Spec:
	//	name=ID |
	//	',' ID ID '=' expressions+=Expression |
	//	',' ID '=' expressions+=Expression | ID ID '=' expressions+=Expression | ID '=' INT |
	//	',' ID ',' ID;
	public SpecElements getSpecAccess() {
		return pSpec;
	}
	
	public ParserRule getSpecRule() {
		return getSpecAccess().getRule();
	}
	
	//Expression:
	//	ID '(' Sign INT ')' | ID '.' ID '(' Sign INT ')' | ID '[' ID ']' | Sign INT ',' Sign INT | Sign INT | INT;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Sign:
	//	'-' | '+';
	public SignElements getSignAccess() {
		return pSign;
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
