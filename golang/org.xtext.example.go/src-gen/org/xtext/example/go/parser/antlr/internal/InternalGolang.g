/*
 * generated by Xtext 2.12.0
 */
grammar InternalGolang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.go.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.go.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.go.services.GolangGrammarAccess;

}

@parser::members {

 	private GolangGrammarAccess grammarAccess;

    public InternalGolangParser(TokenStream input, GolangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "VarDecl";
   	}

   	@Override
   	protected GolangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	iv_ruleVarDecl=ruleVarDecl
	{ $current=$iv_ruleVarDecl.current; }
	EOF;

// Rule VarDecl
ruleVarDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='var'
			{
				newLeafNode(otherlv_0, grammarAccess.getVarDeclAccess().getVarKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclAccess().getSpecsSpecParserRuleCall_0_1_0());
					}
					lv_specs_1_0=ruleSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclRule());
						}
						add(
							$current,
							"specs",
							lv_specs_1_0,
							"org.xtext.example.go.Golang.Spec");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)
		    |
		(
			otherlv_2='var'
			{
				newLeafNode(otherlv_2, grammarAccess.getVarDeclAccess().getVarKeyword_1_0());
			}
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getVarDeclAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclAccess().getSpecsSpecParserRuleCall_1_2_0());
					}
					lv_specs_4_0=ruleSpec
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclRule());
						}
						add(
							$current,
							"specs",
							lv_specs_4_0,
							"org.xtext.example.go.Golang.Spec");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getVarDeclAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleSpec
entryRuleSpec returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecRule()); }
	iv_ruleSpec=ruleSpec
	{ $current=$iv_ruleSpec.current; }
	EOF;

// Rule Spec
ruleSpec returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSpecAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpecRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getSpecAccess().getCommaKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				newLeafNode(this_ID_2, grammarAccess.getSpecAccess().getIDTerminalRuleCall_1_1());
			}
			this_ID_3=RULE_ID
			{
				newLeafNode(this_ID_3, grammarAccess.getSpecAccess().getIDTerminalRuleCall_1_2());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getSpecAccess().getEqualsSignKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSpecAccess().getExpressionsExpressionParserRuleCall_1_4_0());
					}
					lv_expressions_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpecRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_5_0,
							"org.xtext.example.go.Golang.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getSpecAccess().getCommaKeyword_2_0());
			}
			this_ID_7=RULE_ID
			{
				newLeafNode(this_ID_7, grammarAccess.getSpecAccess().getIDTerminalRuleCall_2_1());
			}
			otherlv_8='='
			{
				newLeafNode(otherlv_8, grammarAccess.getSpecAccess().getEqualsSignKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSpecAccess().getExpressionsExpressionParserRuleCall_2_3_0());
					}
					lv_expressions_9_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpecRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_9_0,
							"org.xtext.example.go.Golang.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			this_ID_10=RULE_ID
			{
				newLeafNode(this_ID_10, grammarAccess.getSpecAccess().getIDTerminalRuleCall_3_0());
			}
			this_ID_11=RULE_ID
			{
				newLeafNode(this_ID_11, grammarAccess.getSpecAccess().getIDTerminalRuleCall_3_1());
			}
			otherlv_12='='
			{
				newLeafNode(otherlv_12, grammarAccess.getSpecAccess().getEqualsSignKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSpecAccess().getExpressionsExpressionParserRuleCall_3_3_0());
					}
					lv_expressions_13_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpecRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_13_0,
							"org.xtext.example.go.Golang.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			this_ID_14=RULE_ID
			{
				newLeafNode(this_ID_14, grammarAccess.getSpecAccess().getIDTerminalRuleCall_4_0());
			}
			otherlv_15='='
			{
				newLeafNode(otherlv_15, grammarAccess.getSpecAccess().getEqualsSignKeyword_4_1());
			}
			this_INT_16=RULE_INT
			{
				newLeafNode(this_INT_16, grammarAccess.getSpecAccess().getINTTerminalRuleCall_4_2());
			}
		)
		    |
		(
			otherlv_17=','
			{
				newLeafNode(otherlv_17, grammarAccess.getSpecAccess().getCommaKeyword_5_0());
			}
			this_ID_18=RULE_ID
			{
				newLeafNode(this_ID_18, grammarAccess.getSpecAccess().getIDTerminalRuleCall_5_1());
			}
			otherlv_19=','
			{
				newLeafNode(otherlv_19, grammarAccess.getSpecAccess().getCommaKeyword_5_2());
			}
			this_ID_20=RULE_ID
			{
				newLeafNode(this_ID_20, grammarAccess.getSpecAccess().getIDTerminalRuleCall_5_3());
			}
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current.getText(); }
	EOF;

// Rule Expression
ruleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_0_0());
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getSignParserRuleCall_0_2());
			}
			this_Sign_2=ruleSign
			{
				$current.merge(this_Sign_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getExpressionAccess().getINTTerminalRuleCall_0_3());
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			this_ID_5=RULE_ID
			{
				$current.merge(this_ID_5);
			}
			{
				newLeafNode(this_ID_5, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_1_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getFullStopKeyword_1_1());
			}
			this_ID_7=RULE_ID
			{
				$current.merge(this_ID_7);
			}
			{
				newLeafNode(this_ID_7, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_1_2());
			}
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_1_3());
			}
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getSignParserRuleCall_1_4());
			}
			this_Sign_9=ruleSign
			{
				$current.merge(this_Sign_9);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_INT_10=RULE_INT
			{
				$current.merge(this_INT_10);
			}
			{
				newLeafNode(this_INT_10, grammarAccess.getExpressionAccess().getINTTerminalRuleCall_1_5());
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_1_6());
			}
		)
		    |
		(
			this_ID_12=RULE_ID
			{
				$current.merge(this_ID_12);
			}
			{
				newLeafNode(this_ID_12, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_2_0());
			}
			kw='['
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getLeftSquareBracketKeyword_2_1());
			}
			this_ID_14=RULE_ID
			{
				$current.merge(this_ID_14);
			}
			{
				newLeafNode(this_ID_14, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_2_2());
			}
			kw=']'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getRightSquareBracketKeyword_2_3());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getSignParserRuleCall_3_0());
			}
			this_Sign_16=ruleSign
			{
				$current.merge(this_Sign_16);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_INT_17=RULE_INT
			{
				$current.merge(this_INT_17);
			}
			{
				newLeafNode(this_INT_17, grammarAccess.getExpressionAccess().getINTTerminalRuleCall_3_1());
			}
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getCommaKeyword_3_2());
			}
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getSignParserRuleCall_3_3());
			}
			this_Sign_19=ruleSign
			{
				$current.merge(this_Sign_19);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_INT_20=RULE_INT
			{
				$current.merge(this_INT_20);
			}
			{
				newLeafNode(this_INT_20, grammarAccess.getExpressionAccess().getINTTerminalRuleCall_3_4());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getSignParserRuleCall_4_0());
			}
			this_Sign_21=ruleSign
			{
				$current.merge(this_Sign_21);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_INT_22=RULE_INT
			{
				$current.merge(this_INT_22);
			}
			{
				newLeafNode(this_INT_22, grammarAccess.getExpressionAccess().getINTTerminalRuleCall_4_1());
			}
		)
		    |
		this_INT_23=RULE_INT
		{
			$current.merge(this_INT_23);
		}
		{
			newLeafNode(this_INT_23, grammarAccess.getExpressionAccess().getINTTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleSign
entryRuleSign returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignRule()); }
	iv_ruleSign=ruleSign
	{ $current=$iv_ruleSign.current.getText(); }
	EOF;

// Rule Sign
ruleSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword_0());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignAccess().getPlusSignKeyword_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
