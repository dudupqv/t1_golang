/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.go.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.go.golang.GolangPackage;
import org.xtext.example.go.golang.Spec;
import org.xtext.example.go.golang.VarDecl;
import org.xtext.example.go.services.GolangGrammarAccess;

@SuppressWarnings("all")
public class GolangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GolangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GolangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GolangPackage.SPEC:
				sequence_Spec(context, (Spec) semanticObject); 
				return; 
			case GolangPackage.VAR_DECL:
				sequence_VarDecl(context, (VarDecl) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Spec returns Spec
	 *
	 * Constraint:
	 *     (name=ID | expressions+=Expression | expressions+=Expression | expressions+=Expression)
	 */
	protected void sequence_Spec(ISerializationContext context, Spec semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarDecl returns VarDecl
	 *
	 * Constraint:
	 *     (specs+=Spec+ | specs+=Spec+)
	 */
	protected void sequence_VarDecl(ISerializationContext context, VarDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
