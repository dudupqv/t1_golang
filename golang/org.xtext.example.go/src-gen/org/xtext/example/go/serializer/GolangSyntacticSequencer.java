/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.go.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.go.services.GolangGrammarAccess;

@SuppressWarnings("all")
public class GolangSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GolangGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Spec___CommaKeyword_5_0_IDTerminalRuleCall_5_1_CommaKeyword_5_2_IDTerminalRuleCall_5_3___or___IDTerminalRuleCall_4_0_EqualsSignKeyword_4_1_INTTerminalRuleCall_4_2__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GolangGrammarAccess) access;
		match_Spec___CommaKeyword_5_0_IDTerminalRuleCall_5_1_CommaKeyword_5_2_IDTerminalRuleCall_5_3___or___IDTerminalRuleCall_4_0_EqualsSignKeyword_4_1_INTTerminalRuleCall_4_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getSpecAccess().getCommaKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getSpecAccess().getIDTerminalRuleCall_5_1()), new TokenAlias(false, false, grammarAccess.getSpecAccess().getCommaKeyword_5_2()), new TokenAlias(false, false, grammarAccess.getSpecAccess().getIDTerminalRuleCall_5_3())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getSpecAccess().getIDTerminalRuleCall_4_0()), new TokenAlias(false, false, grammarAccess.getSpecAccess().getEqualsSignKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getSpecAccess().getINTTerminalRuleCall_4_2())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Spec___CommaKeyword_5_0_IDTerminalRuleCall_5_1_CommaKeyword_5_2_IDTerminalRuleCall_5_3___or___IDTerminalRuleCall_4_0_EqualsSignKeyword_4_1_INTTerminalRuleCall_4_2__.equals(syntax))
				emit_Spec___CommaKeyword_5_0_IDTerminalRuleCall_5_1_CommaKeyword_5_2_IDTerminalRuleCall_5_3___or___IDTerminalRuleCall_4_0_EqualsSignKeyword_4_1_INTTerminalRuleCall_4_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (ID '=' INT) | (',' ID ',' ID)
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Spec___CommaKeyword_5_0_IDTerminalRuleCall_5_1_CommaKeyword_5_2_IDTerminalRuleCall_5_3___or___IDTerminalRuleCall_4_0_EqualsSignKeyword_4_1_INTTerminalRuleCall_4_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
